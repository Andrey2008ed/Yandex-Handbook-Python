# Дана строка в формате UTF-8
# Необходимо найти самый часто повторяющийся символ.
# В случае, если несколько символо встречаются одинаковое количество раз, вывести любое.

# 1 способ
s = input()
print(max(map(lambda x: (s.count(x), x), s))[1]) # Быстрый и эффективный способ нахождения наиболее встречающегося символа.

# 2 способ (Сложность алгоритма = O(N**2))
s = input() 
answer = "" # присваиваем пустую строку, так как будем выводить string тип
counter = 0 # создаем условный счетчик, тут уже присваиваем 0, так как тип integer
for i in range(len(s)): # перебираем все позиции
    nowcounter = 0 # текущий счетчик
    for j in range(len(s)): # и для каждой позиции еще раз перебираем все позиции
        if s[i] == s[j]: # если совпало, то прибавляем к текущему счетчику 1
            nowcounter += 1
    if nowcounter > counter: # если текущий счетчик больше условного (изначально 0)
        answer = s[i] # то присваиваем answer этот элемент
        counter = nowcounter # а счетчику = текущий счетчик
print(answer)
# К примеру мы ввели 3 буквы А в тексте и 4 Б, сначала nowcounter будет равен 3 и присвоится к counter, после этого буква Б
# покажет результат в 4, и перепишется. По итогам выведется символ, встречающийся больше всего раз. 

# 3 способ. Эффективнее второго, сложность алгоритма уменьшена. (Заместо O(N**2) мы получили O(N*K)
s = input() 
answer = "" 
counter = 0 
for now in set(s): # В отличии от прошлого варианта мы перебираем букву в МНОЖЕСТВЕ символов этой строки, а не позицию буквы
    nowcounter = 0 
    for j in range(len(s)): 
        if now == s[j]: 
            nowcounter += 1
    if nowcounter > counter: 
        answer = now 
        counter = nowcounter 
print(answer)
# Сет - функция, которая делает множество из объекта
# Принцип работы - строка ababa превращается в множество a и b, и по итогу мы считаем кол-во a и b, не перебирая каждый элемент.

# 4 способ (Еще более эффективный способ. Сложность алгоритма = O(N+K) или же O(N))
# Можно завести словарь, где ключом является символ, а значением - сколько раз он встретился. Если символ встретился впервые
# - создаем элемент словаря с ключом, совпадающим с этим символом и значением 0. Прибавляем к элементу словаря с ключом,
# совпадающем с этим символом, единицу. 
s = input() 
answer = "" 
counter = 0 
dct = {} # создаем пустой словарь
for now in s:
    if now not in dct: # если элемента нет в словаре
        dct[now] = 0 # то записываем его в словарь и присваиваем ему 0, после цикла, он добавит + 1 (элемент встретился 1 раз)
    dct[now] += 1 # в случае, если элемент уже встречался (к примеру 2 раза, он не проходит if и сразу добавляется + 1)
for key in dct:
    if dct[key] > counter:
        counter = dct[key]
        answer = key
print(answer)


# N = длина строки, а K - количество символов строки
#       Время    Память
# 1     O(N**2)    O(N)
# 2     O(N*2)     O(N)
# 3     O(N)       O(K)


