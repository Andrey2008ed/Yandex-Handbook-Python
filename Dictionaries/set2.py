# По элементам множества можно пройти в цикле:

vowels = {"а", "e", "ё", "и", "о", "у", "ы", "э", "ю", "я"}
for letter in vowels:
    print(letter, end=" ")
print()
# Выполнив пример несколько раз, мы снова видим разную последовательность вывода букв.

# Множества в Python позволяют выполнять следующие операции:

# Объединение множеств. Возвращает множество, состоящее из элементов всех объединяемых множеств. 
# Обозначается union() или |. 
s_1 = {1, 2, 3}
s_2 = {3, 4, 5}
s_union = s_1 | s_2
# s_union = s_1.union(s_2)
print(s_union)
# 1 2 3 4 5

# Пересечение множеств. Возвращает множество, состоящее из общих элементов пересекаемых множеств. Обозначается intersection или &.
s_1 = {1, 2, 3}
s_2 = {3, 4, 5}
s_intersection = s_1 & s_2
# s_intersection = s_1.intersection(s_2)
print(s_intersection)
# 3

# Разность множеств. Возвращает множество, где указаны элементы из первого множества, которых нет 
# во втором — вычитаемом — множестве. Обозначается difference или -.
s_1 = {1, 2, 3}
s_2 = {3, 4, 5}
s_dif = s_1 - s_2
# s_dif = s_1.difference(s_2)
print(s_dif)
# 1 2

# Симметричная разность множеств. Возвращает множество, состоящее из элементов, встречающихся в первом или втором 
# множестве, но не в обоих сразу. Обозначается symmetric_difference или ^.
s_1 = {1, 2, 3}
s_2 = {3, 4, 5}
s_sym_dif = s_1 ^ s_2
# s_sym_dif = s_1.symmetric_difference(s_2)
print(s_sym_dif)
# 1 2 4 5

