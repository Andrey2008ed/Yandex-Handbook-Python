"""
Транслитерация
Для международных документов русский текст преобразуется с использованием латинского алфавита.
ГОСТ Р 52535.1-2006 задаёт правила транслитерации идентификационных карт.

Давайте транслитерируем русский текст.

Букву «ё» транслитерируйте как «e», «й» как «и», а «ъ» и «ь» (и их заглавные версии «Ъ» и «Ь») должны исчезнуть из текста. 
Строчные буквы заменяются на строчные, заглавные заменяются на заглавные. Если заглавная буква превращается при транслитерации 
в несколько букв, то заглавной должна остаться только первая из них (например, «Ц» → «Tc»). Все некириллические символы 
должны остаться на месте.

Формат ввода
В единственной строке задан русский текст. Текст может состоять из любых символов. Вам необходимо транслитерировать 
только русские буквы, а остальные оставить на месте. Гарантируется, что нет слов, состоящих только из букв «ъ» и «ь».

Формат вывода
Выведите одну строку — транслитерированный текст.

Ввод:
Я помню чудное мгновенье: Передо мной явилась ты, Как мимолетное виденье, Как гений чистой красоты.

Вывод:
Ia pomniu chudnoe mgnovene: Peredo mnoi iavilas ty, Kak mimoletnoe videne, Kak genii chistoi krasoty.

Решение: Создаем словарь где ключами будут являться русские буквы верхнего и нижнего регистра, а значениями - их транскрибация
в идентичных регистрах. Строку, которая будет введена конвертируем в список. Создаем метод, где указываем 2 аргумента
первый аргумент - текст (буква), второй - множество из русских букв. В теле метода возвращаем булево значение (True, False), если
текст присутствует во множестве - то возвращаем True, иначе False. Данный метод нужен для того, чтобы определять русская ли это
буква или нет, так как в условиях мы должны заменять только русские буквы, а все остальное оставлять таким, какое есть, в том 
числе и символы #!&@$% и т.д. Проверяем каждый элемент в слове из строки на наличие во множестве, если метод вернул значение True
то заменяем элемент на значение из словаря, иначе выводим элемент без изменений.
"""

dictionary = {'Ь': '', 'ь': '', 'Ъ': '', 'ъ': '', 'А': 'A', 'а': 'a', 'Б': 'B', 'б': 'b', 'В': 'V', 'в': 'v',
              'Г': 'G', 'г': 'g', 'Д': 'D', 'д': 'd', 'Е': 'E', 'е': 'e', 'Ё': 'E', 'ё': 'e', 'Ж': 'Zh', 'ж': 'zh',
              'З': 'Z', 'з': 'z', 'И': 'I', 'и': 'i', 'Й': 'I', 'й': 'i', 'К': 'K', 'к': 'k', 'Л': 'L', 'л': 'l',
              'М': 'M', 'м': 'm', 'Н': 'N', 'н': 'n', 'О': 'O', 'о': 'o', 'П': 'P', 'п': 'p', 'Р': 'R', 'р': 'r',
              'С': 'S', 'с': 's', 'Т': 'T', 'т': 't', 'У': 'U', 'у': 'u', 'Ф': 'F', 'ф': 'f', 'Х': 'Kh', 'х': 'kh',
              'Ц': 'Tc', 'ц': 'tc', 'Ч': 'Ch', 'ч': 'ch', 'Ш': 'Sh', 'ш': 'sh', 'Щ': 'Shch', 'щ': 'shch', 'Ы': 'Y',
              'ы': 'y', 'Э': 'E', 'э': 'e', 'Ю': 'Iu', 'ю': 'iu', 'Я': 'Ia', 'я': 'ia'}
text = list(input())


def match(text, alphabet=set('абвгдеёжзийклмнопрстуфхцчшщыьэъюя')):
    return not alphabet.isdisjoint(text.lower()) # Проверка отсутствия общих элементов множества и последовательности
# возвращает True если отсутствует, но при операторе not - наоборот возвращает False

for word in text: 
    for v in word: 
        if match(v) is True:
            print(dictionary.get(v), end="")
        elif match(v) is False:
            print(v, end="")
