"""
Карта сокровищ

На пиратской карте отмечено N точек, в которых зарыты сокровища. Каждая точка задана координатами (x, y)
Координаты указаны в километрах. Команда Капитана Крюка хочет составить маршрут, чтобы собрать как можно больше кладов. 
Однако есть ограничение: для любых двух соседних точек маршрута (xi, yi) и (xj, yj) координаты xi и xj могут различаться 
только последней цифрой, как и координаты yi, yj тоже могут различаться только последней цифрой. Например, после точки (15, 10) 
они могут отправиться в точку (18, 16), а вот из точки (14, 68) в точку (19, 71) пройти уже не получится, ведь 68 и 71 
различаются не только последней цифрой. Из точки (5, 12) в точку (13, 14) попасть тоже нельзя, так как числа 5 и 13 отличаются 
в разряде десятков. По заданным координатам определите, какое максимальное количество точек сможет добавить в свой маршрут 
Капитан Крюк.

Формат вывода
Выведите одно число — максимальное количество точек, которое Капитан Крюк сможет посетить по маршруту, построенному 
по описанным правилам.

Формат ввода
В первой строке указано число N < 10^5 — количество точек, отмеченных на карте сокровищ. 
В следующих N строках содержатся пары координат: x, y координаты i - ой точки. Координаты — целые числа 
не меньше нуля и не больше 10^9. Гарантируется, что совпадающих точек в списке нет.

Ввод:
9
10 18
17 15
25 21
0 21
1 16
25 29
24 24
8 26
10 20

Вывод:
3

Решение: Так как координат может быть очень много, в этой задаче нужно не просто найти правильный ответ, но еще и оптимизировать
код так, чтобы он исполнялся за менее, чем 1 секунду. Для этого воспользуемся словарем. Сначала записываем все координаты
в список, разделяя их split() и присваивая тип int каждому элементу при помощи map(). Создаем пустой словарь. 
Проходим по всем координатам и делим каждое число целочисленным делением, тем самым убирая у него последнюю цифру, ибо по 
условиям задачи мы должны сравнивать все кроме последней цифры каждой координаты. И создаем кортеж из результата деления. 
Если кортежа нет в словаре, то записываем его и присваиваем ему 0, на следующем шаге он получит + 1 к значению, если кортеж
уже имеется в словаре - то пропускаем шаг создания нового ключа и просто добавляем + 1 к значению. По завершению выводим
максимальное значение среди значений словаря.
"""

num = int(input())
coordinates = [list(map(int, input().split(" "))) for i in range(num)]
dct = {}
for i in range(num):
    tuple = (coordinates[i][0] // 10, coordinates[i][1] // 10)
    if tuple not in dct:
        dct[tuple] = 0
    dct[tuple] += 1
print(max(dct.values()))
