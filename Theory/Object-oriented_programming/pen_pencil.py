"""
В ООП для создания новых классов на основе других применяется принцип наследования.

Наследование позволяет при создании нового класса указать для него базовый класс. 
От базового класса наследуется вся его структура – атрибуты и методы. 
Созданный класс-наследник называется производным классом.

Покажем принцип наследования на примере. Напишем класс "карандаш"" Pencil, который в качестве 
атрибута хранит цвет карандаша. Карандашом можно нарисовать рисунок. Также напишем класс "ручка" 
Pen, который также хранит цвет, но кроме создания рисунка может ещё и подписать документ, если 
цвет ручки синий, чёрный или фиолетовый.
"""

class Pencil:

    def __init__(self, color="серый"):
        self.color = color

    def draw_picture(self):
        return f"Нарисован рисунок цветом '{self.color}'."


class Pen(Pencil):

    def sign_document(self):
        if self.color not in ("синий", "чёрный", "фиолетовый"):
            return f"Ручкой цвета '{self.color}' нельзя подписать документ."
        return f"Подписан документ."


blue_pen = Pen(color="синий")
print(blue_pen.draw_picture())
print(blue_pen.sign_document())
red_pen = Pen(color="красный")
print(red_pen.draw_picture())
print(red_pen.sign_document())

# Нарисован рисунок цветом 'синий'.
# Подписан документ.
# Нарисован рисунок цветом 'красный'.
# Ручкой цвета 'красный' нельзя подписать документ.


"""
Класс Pen является производным от базового класса Pencil. За счёт этого мы не описывали заново методы 
__init__ и draw_picture, и они работают так же, как и в базовом классе. Атрибут color тоже унаследован 
из базового класса Pencil. Интерпретатор при вызове метода или атрибута сначала ищет их в текущем производном классе. 
Если их нет в текущем классе, то происходит поиск в базовом классе. Если и в базовом их нет, то происходит 
поиск в вышестоящем базовом классе (в базовом классе для текущего базового класса). И так далее, пока метод 
или атрибут не буден найден в одном из базовых классов. Иначе программа выдаст ошибку класса AttributeError.

Добавим в классе "ручка" возможность указать тип ручки: шариковая, гелевая, перьевая и так далее. 
И пусть подписать документ можно любой ручкой кроме гелевой. Для получения типа ручки нам нужно модифицировать 
метод __init__, добавив в него аргумент pen_type и сохранив его значение в атрибуте. Таким образом, нам нужно 
дополнить метод базового класса. Такая операция при наследовании называется расширением метода.

При расширении методов необходимо вначале вызвать метод базового класса с помощью функции super(). 
Если этого не сделать, то не будут созданы атрибуты базового класса в производном классе, и это 
приведет к ошибке отсутствия атрибутов.
"""

class Pencil:

    def __init__(self, color="серый"):
        self.color = color

    def draw_picture(self):
        return f"Нарисован рисунок цветом '{self.color}'."


class Pen(Pencil):

    def __init__(self, color, pen_type):
        super().__init__(color=color)
        self.pen_type = pen_type

    def sign_document(self):
        if self.color not in ("синий", "чёрный", "фиолетовый"):
            return f"Ручкой цвета '{self.color}' нельзя подписать документ."
        elif self.pen_type == "гелевая":
            return f"Ручкой типа '{self.pen_type}' нельзя подписать документ."
        return f"Подписан документ."

blue_ball_pen = Pen(color="синий", pen_type="шариковая")
print(blue_ball_pen.draw_picture())
print(blue_ball_pen.sign_document())
blue_gel_pen = Pen(color="синий", pen_type="гелевая")
print(blue_gel_pen.draw_picture())
print(blue_gel_pen.sign_document())

# Нарисован рисунок цветом 'синий'.
# Подписан документ.
# Нарисован рисунок цветом 'синий'.
# Ручкой типа 'гелевая' нельзя подписать документ.


"""
Если в производном классе метод базового класса переписывается заново, то говорят о переопределении метода. 
Переопределим метод draw_picture так, чтобы он выводил информацию о типе ручки, которой нарисован рисунок. 
В класс Pen нужно добавить следующий код:
"""

def draw_picture(self):
    return f"Нарисован рисунок ручкой типа '{self.pen_type}', цветом '{self.color}'."

# Нарисован рисунок ручкой типа 'шариковая', цветом 'синий'.
# Подписан документ.
# Нарисован рисунок ручкой типа 'гелевая', цветом 'синий'.
# Ручкой типа 'гелевая' нельзя подписать документ.

