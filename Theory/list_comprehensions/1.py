"""
В Python, кроме уже известных нам функций и методов, существует удобный способ обработки и создания списков -- списочные 
выражения (list comprehensions). Рассмотрим их применение на примере.

Необходимо создать список из 5 целых чисел, которые вводятся с клавиатуры, каждое число с новой строки. 
Вариант программы без использования списочных выражений:
"""
numbers = []
for i in range(5):
    numbers.append(int(input()))
print(numbers)
"""С использованием списочных выражений программа запишется так: """

numbers = [int(input()) for i in range(5)]
print(numbers) 

"""
Обратите внимание, что цикл теперь находится внутри списочного выражения и на каждой итерации программа получает 
введённую строку, превращает её в целое число и добавляет к списку. Применение списочных выражений для генерации 
списков улучшает читаемость кода.

В списочных выражениях можно не только запустить цикл, но и использовать условный оператор. 
Добавим в наш пример условие: в списке должны оказаться только числа, значение которых больше среднего арифметического 
всех введённых чисел:
"""
numbers = [int(input()) for i in range(5)]
avg = sum(numbers) // len(numbers)
numbers = [element for element in numbers if element > avg]
print(numbers)

"""
Внутри списочного выражения мы использовали условный оператор, а в список в результате попадут только те элементы, 
для которых выполнится условие в условном операторе. Построенное списочное выражение можно прочитать так: 
"пройди по элементам списка numbers и запиши очередной элемент в результирующий список, если для элемента выполняется условие".

Обратите внимание на некорректный с точки зрения производительности пример использования списочного выражения. 
В нашем примере мы могли бы обойтись без дополнительной переменной, поместив функцию sum() внутри списочного выражения:
"""
numbers = [int(input()) for i in range(5)]
numbers = [element for element in numbers if element > sum(numbers) // len(numbers)]
print(numbers)
"""
Однако с точки зрения производительности это будет ошибкой, так как сумма элементов списка будет пересчитываться для 
каждого проверяемого элемента списка, а не один раз как в предыдущей версии программы.

В списочных выражениях можно использовать вложенные циклы. Считаем с клавиатуры матрицу целых чисел размерностью 
5 на 3 (5 строк, 3 столбца). Числа в строке разделены пробелом, количество строк равно 5. При этом программа не 
следит за количеством чисел в строке, так как используется метод split(); поэтому в общем случае приведённая программа 
может считать не матрицу в математическом смысле, а вложенный список.
"""
matrix = [[int(x) for x in input().split()] for i in range(5)]
print(matrix)
"""
Пример ввода:

1 2 3 4 5
2 3 4 5 6
3 4 5 6 7
4 5 6 7 8
5 6 7 8 9

Вывод программы:

[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [5, 6, 7, 8, 9]]

Списочное выражение в примере можно прочитать так: "запусти цикл из пяти итераций и на каждой итерации прочитай строку 
с клавиатуры, преобразуй её в список элементов, а затем пройди по этому списку строк и каждый элемент преобразуй 
в целое число; добавь полученный список целых чисел в конец результирующего списка".
"""


