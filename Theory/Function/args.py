"""
Чтобы указать, что функция может принимать неограниченное количество позиционных аргументов, 
нужно при её объявлении поставить аргумент со *. К примеру, *args. В функции этот аргумент будет кортежем, 
содержащим переданные значения позиционных аргументов.
"""

def final_price(*prices, discount=1):
    return [price - price * discount / 100 for price in prices]


print(final_price(100, 200, 300, discount=5))
# [95.0, 190.0, 285.0]


"""
Чтобы функция могла принимать неограниченное количество именованных аргументов, нужно при её объявлении 
поставить аргумент с **. Например, **kwargs (сокращение от "keyword arguments"). 
В функции этот аргумент будет словарём, ключи которого будут строками, содержащими имена передаваемых 
аргументов, а значения по ключам будут соответствовать значениям передаваемых аргументов.

Добавим в нашу функцию возможность принимать границы диапазона цен, для которых рассчитывается скидка. 
Вернём список только рассчитанных со скидкой цен. Границы диапазона будут передаваться в аргументах 
price_low и price_high. Если нижняя или правая границы не переданы, то используем минимальную и 
максимальную стоимости из позиционных аргументов:
"""

def final_price(*prices, discount=1, **kwargs):
    low = kwargs.get("price_low", min(prices))
    high = kwargs.get("price_high", max(prices))
    return [price - price * discount / 100 for price in prices if low <= price <= high]


print(final_price(100, 200, 300, 400, 500, discount=5))
# [95.0, 190.0, 285.0, 380.0, 475.0]
print(final_price(100, 200, 300, 400, 500, discount=5, price_low=200))
# [190.0, 285.0, 380.0, 475.0]
print(final_price(100, 200, 300, 400, 500, discount=5, price_high=200))
# [95.0, 190.0]
print(final_price(100, 200, 300, 400, 500, discount=5, price_low=200, price_high=350))
# [190.0, 285.0]





