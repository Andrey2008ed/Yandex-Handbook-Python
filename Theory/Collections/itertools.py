"""
Встроенные возможности по работе с коллекциями
Мы уже знаем, что для работы с коллекциями в Python есть функции и методы. Однако часто требуется выполнить 
над коллекциями некоторые операции, которых нет в рассмотренных нами методах и функциях. Тогда на помощь приходят 
библиотеки (модули).

Библиотека может содержать наборы функций, объединённые по области применения. Например, в данной лекции мы рассмотрим
библиотеку для работы с коллекциями. Библиотеки помогают программистам сосредоточиться на решении глобальной задачи,
а мелкие, часто возникающие задачи решаются вызовом готовых функций из библиотек.

В Python есть достаточно много стандартных встроенных библиотек. Одной из них является библиотека для работы с коллекциями 
itertools. На эту библиотеку оказали влияние такие языки программирования, как APL, Haskell и SML.

Чтобы получить доступ к функциям библиотеки, её необходимо подключить к своей программе (импортировать). Это можно 
сделать, используя ключевое слово import вместе с названием библиотеки. Импорт библиотек осуществляется в начале программы. 
После секции импорта следует оставить одну пустую строку по стандарту PEP 8. Пример импорта библиотеки itertools:
"""
import itertools

"""
Если теперь нам потребуется в этой библиотеке какая-то функция, например product(), то для её вызова нужно написать 
название библиотеки, поставить точку и написать название функции:
"""

import itertools

print(itertools.product("ABC", repeat=2))

# <itertools.product object at 0x000001174A39A9C0>
"""
Как видим из программы, для доступа к функциям библиотеки мы обращаемся сначала к самой библиотеке, а потом уже 
вызываем из неё функцию.

Можно импортировать функции из библиотек так, как если бы они стали частью нашей программы. Тогда следует указать 
ключевое слово from, затем название библиотеки, а после — import и через запятую указать названия функций, которые 
будут импортированы в нашу программу. При таком импорте вызов функций библиотеки осуществляется без указания названия 
библиотеки:
"""

from itertools import product

print(list(product("ABC", repeat=2)))

# [('A', 'A'), ('A', 'B'), ('A', 'C'), ('B', 'A'), ('B', 'B'), ('B', 'C'), ('C', 'A'), ('C', 'B'), ('C', 'C')]
"""
Обратите внимание: функции библиотеки itertools возвращают не список, а итератор. Он не хранит все значения сразу, 
а позволяет один раз последовательно пройти по ним в цикле.

Для сохранения всех значений итератора его можно преобразовать в список с помощью функции list().
"""


