"""
Польский калькулятор — 2

Потренируемся в ОПН дальше. Операции, которые выполняются с одним значением, называются унарными, с двумя — бинарными, 
с тремя — тернарными. Давайте улучшим наш калькулятор, добавив поддержку следующих операций:

бинарные:
+ (сложение),
- (вычитание),
* (умножение),
/ (деление нацело; для отрицательных чисел работает по тем же правилам, что и в Python);

унарные:
~ (унарный минус — меняет знак),
! (факториал),
# (клонирование — вернуть в стек значение дважды);

тернарные:
@ (возвращает в стек те же три значения, но в ином порядке: второе, третье, первое).

Формат ввода
Вводится одна строка, содержащая разделённые пробелами целые числа и знаки операций. 
Вместе они составляют корректное выражение в обратной польской нотации, не содержащее деления на ноль и взятия 
факториала от отрицательного числа.

Формат вывода
Выводится одно целое число — результат вычисления выражения.

Примечание
В первом примере стек по мере прочтения строки выглядит так:

7
7 1
7 1 10
7 1 10 100
7 1 10 100 100
7 1 10 10000
7 10 10000 1
7 10 9999
7 10009
10016
-10016

Ввод:
7 1 10 100 # * @ - + + ~

Вывод:
-10016
"""

polskiu = [] # создаем пустой список

 
def fac(n): # рекурсивная функция факториала
    if n == 0:
        return 1
    return fac(n - 1) * n
 
 
s = input().split() # вводим строку
for x in s: 
    if x == '+': # если x это +
        g = polskiu.pop() # из списка возвращаем последний элемент, а в списке удаляем его
        z = polskiu.pop() # делаем то же самое с переменной z
        polskiu.append(g + z) # суммируем значения
    elif x == '-':
        g = polskiu.pop()
        z = polskiu.pop()
        polskiu.append(z - g)
    elif x == '*':
        g = polskiu.pop()
        z = polskiu.pop()
        polskiu.append(g * z)
    elif x == '#':
        polskiu.append(polskiu[-1]) # возвращаем значение последнего элемента повторно
    elif x == '@':
        polskiu.append(polskiu[-2])
        polskiu.append(polskiu[-2])
        polskiu.append(polskiu[-5])
        del polskiu[-4]
        del polskiu[-4]
        del polskiu[-4]
    elif x == '/':
        g = polskiu.pop()
        z = polskiu.pop()
        polskiu.append(z // g)
    elif x == '~':
        g = polskiu.pop()
        polskiu.append(-g) 
    elif x == '!':
        g = polskiu.pop()
        polskiu.append(fac(g))
    else:
        polskiu.append(int(x))
print(polskiu[0]) # после всех операций выводим число, которое получилось
